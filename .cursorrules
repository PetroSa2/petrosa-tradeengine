# Cursor AI Rules for Petrosa Trading Engine

## Repository Context
This is a Kubernetes-based cryptocurrency trading engine system with comprehensive CI/CD pipeline and local development capabilities.

## Key Files to Reference
- `docs/DEPLOYMENT.md` - Complete production deployment guide with Kubernetes setup
- `docs/LOCAL_PIPELINE.md` - Local development and testing pipeline guide
- `Makefile` - Complete command reference for all development tasks
- `k8s/` - Kubernetes manifests for production deployment
- `k8s/kubeconfig.yaml` - Remote MicroK8s cluster configuration
- `scripts/` - Automation scripts for setup, testing, and deployment

## Prerequisites & Installation
- **Python 3.11+**: Required for development and runtime
- **Docker**: Required for containerization and local testing
- **kubectl**: Required for Kubernetes deployment (remote cluster)
- **Make**: Required for using the Makefile commands
- **Poetry**: Optional but recommended for dependency management

**Note**: This project uses a **remote MicroK8s cluster** - no local Kubernetes installation required.

## Quick Start Commands
```bash
# Complete setup
make setup

# Run local pipeline
make pipeline

# Deploy to Kubernetes
make deploy

# Check deployment status
make k8s-status
```

## Common Issues & Solutions

### 1. Python Environment Issues
```bash
# Check Python version
python3 --version

# Recreate virtual environment
rm -rf .venv
make setup
```

### 2. Docker Build Issues
```bash
# Clean Docker cache
make docker-clean

# Rebuild image
make build
```

### 3. Kubernetes Connection Issues
```bash
# Set kubeconfig for remote cluster
export KUBECONFIG=k8s/kubeconfig.yaml

# Check cluster connection
kubectl --kubeconfig=k8s/kubeconfig.yaml cluster-info

# Check namespace
kubectl --kubeconfig=k8s/kubeconfig.yaml get namespace petrosa-apps

# View deployment status
make k8s-status

# Note: This is a remote MicroK8s cluster - no local installation needed
```

### 4. Application Health Issues
```bash
# Test health endpoints
make health

# View logs
make k8s-logs

# Check metrics
make monitor
```

## Development Workflow

### 1. Initial Setup
```bash
# Complete environment setup
make setup

# Install development dependencies
make install-dev
```

### 2. Code Quality Checks
```bash
# Run all linting
make lint

# Format code
make format

# Run tests
make test

# Security scan
make security
```

### 3. Docker Operations
```bash
# Build image
make build

# Test container
make container

# Run in Docker
make run-docker
```

### 4. Kubernetes Deployment
```bash
# Set kubeconfig for remote cluster
export KUBECONFIG=k8s/kubeconfig.yaml

# Deploy to remote cluster
make deploy

# Check status
make k8s-status

# View logs
make k8s-logs

# Clean up
make k8s-clean
```

## Kubernetes Configuration

### Remote Cluster Setup
- **Cluster Type**: Remote MicroK8s (no local installation required)
- **Connection**: Use `k8s/kubeconfig.yaml` for cluster access
- **Server**: Remote MicroK8s cluster at `https://192.168.194.253:16443`

### Namespace
- **Name**: `petrosa-apps`
- **Labels**: `app=petrosa-tradeengine`

### Components
- **Deployment**: 3 replicas with health checks
- **Service**: ClusterIP on port 80
- **Ingress**: SSL-enabled with Let's Encrypt
- **HPA**: Auto-scaling based on CPU/memory

### Required Secrets
```bash
# Set kubeconfig for remote cluster
export KUBECONFIG=k8s/kubeconfig.yaml

# Create secrets for production
kubectl --kubeconfig=k8s/kubeconfig.yaml create secret generic petrosa-secrets \
  --namespace=petrosa-apps \
  --from-literal=mongodb-url="your-mongodb-url" \
  --from-literal=binance-api-key="your-api-key" \
  --from-literal=binance-api-secret="your-api-secret" \
  --from-literal=jwt-secret-key="your-jwt-secret"
```

## Environment Variables

### Required for Production
- `MONGODB_URL`: MongoDB connection string
- `BINANCE_API_KEY`: Binance API key
- `BINANCE_API_SECRET`: Binance API secret
- `JWT_SECRET_KEY`: JWT signing secret

### Optional Configuration
- `ENVIRONMENT`: Environment name (default: production)
- `LOG_LEVEL`: Logging level (default: INFO)
- `SIMULATION_ENABLED`: Enable simulation mode (default: false)
- `BINANCE_TESTNET`: Use Binance testnet (default: false)

## API Endpoints

### Health Checks
- `/health` - Detailed health status
- `/ready` - Readiness probe
- `/live` - Liveness probe

### Trading Endpoints
- `POST /trade` - Process trading signals
- `GET /account` - Get account information
- `GET /price/{symbol}` - Get current price
- `DELETE /order/{symbol}/{order_id}` - Cancel order
- `GET /order/{symbol}/{order_id}` - Get order status

### Documentation
- `/docs` - Interactive API documentation
- `/openapi.json` - OpenAPI specification
- `/metrics` - Prometheus metrics

## Troubleshooting Scripts

### Complete Diagnostics
```bash
# Run all checks
./scripts/troubleshoot.sh --check-all

# Quick fixes
./scripts/troubleshoot.sh --fix

# Detailed diagnostics
./scripts/troubleshoot.sh --diagnostics
```

### Specific Component Checks
```bash
# Check Python environment
./scripts/troubleshoot.sh --python

# Check dependencies
./scripts/troubleshoot.sh --deps

# Check Docker
./scripts/troubleshoot.sh --docker

# Check Kubernetes
./scripts/troubleshoot.sh --k8s
```

## Local Pipeline

### Complete Pipeline
```bash
# Run all stages
./scripts/local-pipeline.sh

# Run specific stages
./scripts/local-pipeline.sh lint test
./scripts/local-pipeline.sh build container
./scripts/local-pipeline.sh deploy
```

### Pipeline Stages
1. **Setup**: Environment and dependencies
2. **Lint**: Code quality checks (flake8, black, ruff, mypy)
3. **Test**: Unit tests with coverage
4. **Security**: Vulnerability scanning with Trivy
5. **Build**: Docker image building
6. **Container**: Container testing
7. **Deploy**: Kubernetes deployment

## GitHub CLI Commands
When running GitHub CLI (`gh`) commands, always dump output to a temporary file and then read the file:
```bash
# Example: Get repository info
gh repo view --json name,description,url > /tmp/repo_info.json
cat /tmp/repo_info.json

# Example: List issues
gh issue list --json number,title,state > /tmp/issues.json
cat /tmp/issues.json

# Example: Get pull requests
gh pr list --json number,title,state,author > /tmp/prs.json
cat /tmp/prs.json

# Clean up temporary files when done
rm -f /tmp/repo_info.json /tmp/issues.json /tmp/prs.json
```

## Always Reference
- Check `docs/DEPLOYMENT.md` for production deployment details
- Check `docs/LOCAL_PIPELINE.md` for local development workflow
- Use `Makefile` for all common commands
- Use `scripts/` directory for automation and troubleshooting
- Use `k8s/kubeconfig.yaml` for remote MicroK8s cluster connection
- This is a production-ready trading engine with comprehensive CI/CD
- **Remote MicroK8s cluster** - no local Kubernetes installation required
- Kubernetes deployment uses namespace `petrosa-apps`
- Health checks are critical for Kubernetes probes
- Security scanning is integrated into the pipeline 

## Pipeline Fixing Process
When fixing the pipeline, go until it is fully green and stop only when CI/CD on GHA is fixed. This means:
- Run all tests, lint, and build locally until everything passes
- Only commit and push when all local checks are green
- Check the GitHub Actions (GHA) pipeline after pushing
- If the GHA pipeline fails, repeat the process until it is green
- Do not stop until the CI/CD pipeline on GHA is fully fixed 