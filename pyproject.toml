[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "petrosa-tradeengine"
version = "0.1.0"
description = "Petrosa Trading Engine - Signal-driven trading execution"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0.post1",
    "pydantic==2.11.7",
    "motor==3.7.1",
    "prometheus-client==0.19.0",
    "nats-py==2.10.0",
    "python-dotenv==1.1.1",
    "python-binance==1.0.29",
    "pymongo==4.13.2",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.4",
    "pytest-asyncio==0.23.5",
    "pytest-cov==4.1.0",
    "httpx==0.25.2",
    "black==23.12.1",
    "ruff==0.1.15",
    "flake8==7.0.0",
    "mypy==1.8.0",
    "types-requests==2.31.0.20240125",
    "types-python-dateutil==2.8.19.20240106",
    "coverage==7.4.1",
    "codecov==2.1.13",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  # non-python files
  | \.cursorrules
  | setup\.cfg
  | pyproject\.toml
)/
'''

[tool.flake8]
ignore = ["E501", "W503"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err`
]
exclude = [
    ".venv",
    "venv",
    "env",
    "__pycache__",
    ".git",
    "htmlcov",
    "*.egg-info",
    "build",
    "dist"
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow FastAPI decorators
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    ".*\\.venv.*",
    ".*venv.*",
    ".*env.*",
    ".*__pycache__.*",
    ".*\\.git.*",
    ".*htmlcov.*",
    ".*\\.egg-info.*",
    ".*build.*",
    ".*dist.*"
]

[[tool.mypy.overrides]]
module = [
    "nats.*",
    "motor.*",
    "binance.*",
    "sqlalchemy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Standardized pytest configuration for Petrosa Systems
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test execution options
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "--timeout=300",
    "--durations=10",
    "--maxfail=10",
    "--cov=tradeengine",
    "--cov=contracts",
    "--cov=shared",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]

# Test markers
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (require external services)",
    "e2e: End-to-end tests (full workflow)",
    "slow: Slow running tests (>5 seconds)",
    "performance: Performance tests",
    "security: Security tests",
    "smoke: Smoke tests (basic functionality)",
    "regression: Regression tests",
]

# Test discovery
norecursedirs = [
    ".git",
    ".venv",
    "venv",
    "env",
    "__pycache__",
    ".pytest_cache",
    "htmlcov",
    ".mypy_cache",
    ".ruff_cache",
]


[tool.coverage.run]
source = ["tradeengine", "contracts", "shared"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
